#Requires AutoHotkey v2.0
#SingleInstance Force 
#Include Lib\AutoHotInterception.ahk


global BARCODE_MAP := Map()


barcode := ""

ahi := AutoHotInterception()

keyboardId :=   ahi.GetKeyboardId(Integer(VID1), Integer(PID1))  

ahi.SubscribeKeyboard(keyboardId, true, KeyEvent)

SyncAction(*) {

    try {
      
        global  BARCODE_MAP
        BARCODE_MAP.Clear()
        invalidLines := 0
        lineNum := 0

        Loop Read, csvFile
        {
            lineNum++

            fields := StrSplit(A_LoopReadLine, ",")
            if fields.Length = 2 {
                key := Trim(fields[1])

                ; 检查是否都是数字（0-9）
                if RegExMatch(key, "^\d+$") && RegExMatch(value, "^\d+$") {
                    BARCODE_MAP[key] := value
                } else {
                    invalidLines++
                    OutputDebug(lineNum "行 无效条码映射: " key " => " value "`n")
                }
            } else {
                invalidLines++
                OutputDebug(lineNum "行不是两个字段")

    } catch as e {
        MsgBox("错误" e.Message, "导入失败", "Iconx")
    }
}





KeyEvent(code,state) {
    global BARCODE_MAP, barcode

    if !state  
        return 0

    if (code = 28 || code = 284) {  ; Enter 键
        targetCode := BARCODE_MAP.Has(barcode) ? BARCODE_MAP[barcode] : barcode
        SendBarcodeViaDevice(targetCode)
        barcode := ""
    } else {
        char := GetKeyBarCode(code)
        barcode .= char
}


; 码表映射
GetKeyBarCode(code){
	static keycodeMap := Map(2,"1",3,"2",4,"3",5,"4",6,"5",7,"6",8,"7",9,"8",10,"9",11,"0")

    ; 检查参数合法性
    if !keycodeMap.Has(code) {
        return ""  ; 返回空字符串，外部需处理无效情况
    }

	return keycodeMap[code]
}

SendBarcodeViaDevice(barcode) {
    global ahi, keyboardId
    for char in StrSplit(barcode) {
        sc := GetKeySC(char)
        ahi.SendKeyEvent(keyboardId, sc, 1)  ; key down
        ahi.SendKeyEvent(keyboardId, sc, 0)  ; key up
    }
    ahi.SendKeyEvent(keyboardId, GetKeySC("Enter"), 1)
    ahi.SendKeyEvent(keyboardId, GetKeySC("Enter"), 0)
}
